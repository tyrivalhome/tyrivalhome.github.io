{
  "success": true,
  "data": [
    {
      "id": 1,
      "text": "自定义组件",
      "category": "base",
      "name": "DynamicComponent",
      "config": "(function () {\n    return {\n        template: `\n            <button style=\"font-size:40px;\"\n                    @click=\"onEvent('click', config.data[0])\">\n                {{config.option.data.name}}\n            </button>`,\n        methods: {},\n        watch: {},\n        config: {\n            style: {\n                width: 400,\n                height: 300,\n                opacity: 1,\n                visibility: 'visible'\n            },\n            option: {\n                data: {name: null}\n            },\n            data: [\n                {name: '按钮一', value: 80}\n            ],\n            event: [{\n                name: 'click',\n                comment: '点击事件',\n                binders: [\n                    {name: 'name', comment: '数据名', prop: 'name', state: null},\n                    {name: 'series', comment: '数据值', state: null},\n                    {name: 'data', comment: '参数对象', prop: 'data', state: null},\n                ]\n            }],\n            proxy: {\n                type: 1,\n            },\n            transform: {\n                mapper: {\n                    name: null\n                }\n            },\n            trigger: [{\n                show: true,\n                name: '可见性',\n                binder: null,\n                prop: \"config.style.visibility\",\n                defaultValue: true,\n                isScript: true,\n                mapper: [\n                    {key: true, value: 'visible', comment: '返回 true 时显示'},\n                    {key: false, value: 'hidden', comment: '返回 false 时隐藏'},\n                ]\n            }],\n            handler: function (config) {\n                console.log(\"handler\")\n                let data = config.data[0]\n                let mapper = config.transform.mapper\n                let propValue = mapper.name || 'name'\n                config.option.data.name = data[propValue]\n            },\n            render: function (config) {\n                console.log(\"render\")\n            }\n        },\n        hooks: {\n            created: function (self) {\n                console.log(\"created\")\n            },\n            mounted: function (self) {\n                console.log(\"mounted\")\n            },\n            beforeDestroy: function (self) {\n                console.log(\"beforeDestroy\")\n            },\n            destroyed: function (self) {\n                console.log(\"destroyed\")\n            },\n            onStyleListener: function (val, oldVal, self) {\n                console.log(\"onResizeListener\")\n            },\n            onTriggerListener: function (val, oldVal, self) {\n                console.log(\"onTriggerListener\")\n            },\n            onDataListener: function (val, oldVal, self) {\n                console.log(\"onDataListener\")\n            },\n            onOptionListener: function (val, oldVal, self) {\n                console.log(\"onOptionListener\")\n            },\n            onProxyListener: function (val, oldVal, self) {\n                console.log(\"onProxyListener\")\n            },\n            onTransformListener: function (val, oldVal, self) {\n                console.log(\"onTransformListener\")\n            },\n            onEventListener: function (val, oldVal, self) {\n                console.log(\"onEventListener\")\n            }\n        }\n    }\n})()",
      "image": "./data/screen/dynamic_component_sample.png"
    }
  ]
}